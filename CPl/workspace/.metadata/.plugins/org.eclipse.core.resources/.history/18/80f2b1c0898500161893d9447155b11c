#include "cute.h"
#include "ide_listener.h"
#include "xml_listener.h"
#include "cute_runner.h"
#include "sstream"
#include "string"

int calc(int lhs, int rhs, char op) {
	switch (op) {
		case '+':
			return lhs + rhs;
		case '-':
			return lhs - rhs;
		case '*':
			return lhs * rhs;
		case '/':
			return lhs / rhs;
		case '%':
			return lhs % rhs;
		default:
			break;
	}
	return 0;
}

int calc(std::istream& in){

	// read lhs
	int lhs{-1};
	if(!(in >> lhs))
		return -1;

	// read operator
	char op {};
	in.get(op);

	// read rhs
	int rhs{-1};
	if(!(in >> rhs))
		return -1;

	return calc(lhs, rhs, op);
}

void test_one_plus_one_stream(){
	  std::string stringvalues = "10+14";
	  std::istringstream iss (stringvalues);
	  auto result = calc(iss);
	  ASSERT_EQUAL(24, result);
}

void test_one_plus_one() {
	auto result = calc(1, 1, '+');
	ASSERT_EQUAL(2, result);
}

void test_four_minus_one() {
	auto result = calc(4, 1, '-');
	ASSERT_EQUAL(3, result);
}

void test_one_minus_four() {
	auto result = calc(1, 4, '-');
	ASSERT_EQUAL(-3, result);
}

void test_sizteen_mod_two() {
	auto result = calc(17, 2, '%');
	ASSERT_EQUAL(1, result);
}


bool runAllTests(int argc, char const *argv[]) {
	cute::suite s { };

	//TODO Register tests
	s.push_back(CUTE(test_four_minus_one));
	s.push_back(CUTE(test_one_minus_four));
	s.push_back(CUTE(test_sizteen_mod_two));
	s.push_back(CUTE(test_one_plus_one));
	s.push_back(CUTE(test_one_plus_one_stream));

	cute::xml_file_opener xmlfile(argc, argv);
	cute::xml_listener<cute::ide_listener<>> lis(xmlfile.out);
	auto runner { cute::makeRunner(lis, argc, argv) };
	bool success = runner(s, "AllTests");
	return success;
}

int main(int argc, char const *argv[]) {
    return runAllTests(argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE;
}
